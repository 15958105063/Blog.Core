<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Core</name>
    </assembly>
    <members>
        <member name="M:Blog.Core.AuthHelper.OverWrite.JwtHelper.IssueJwt(Blog.Core.AuthHelper.OverWrite.TokenModelJwt)">
            <summary>
            颁发JWT字符串（用来生成token令牌）
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.AuthHelper.OverWrite.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.AuthHelper.OverWrite.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.OverWrite.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.OverWrite.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.OverWrite.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:Blog.Core.AuthHelper.JwtToken">
            <summary>
            JWTToken生成类
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.JwtToken.BuildJwtToken(System.Security.Claims.Claim[],Blog.Core.AuthHelper.Policys.PermissionRequirement)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="claims">需要在登陆的时候配置</param>
            <param name="permissionRequirement">在startup中定义的参数</param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.AuthHelper.Policys.PermissionItem">
            <summary>
            用户或角色或其他凭据实体,就像是订单详情一样
            之前的名字是 Permission
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.Policys.PermissionItem.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.Policys.PermissionItem.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:Blog.Core.AuthHelper.Policys.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.Policys.PermissionRequirement.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.Policys.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.Policys.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.Policys.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.Policys.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.Policys.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.Policys.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.Policys.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.Policys.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{Blog.Core.AuthHelper.Policys.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="T:Blog.Core.Controllers.LoginController">
            <summary>
            登录管理【无权限】
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.#ctor(Blog.Core.IServices.ISysUserInfoServices,Blog.Core.IServices.IUserRoleServices,Blog.Core.IServices.IRoleServices,Blog.Core.AuthHelper.Policys.PermissionRequirement)">
            <summary>
            构造函数注入
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="requirement"></param>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJwtStr(System.String,System.String)">
            <summary>
            获取JWT的方法1
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJwtStrForNuxt(System.String,System.String)">
            <summary>
            获取JWT的方法2：给Nuxt提供
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJwtToken3(System.String,System.String)">
            <summary>
            获取JWT的方法3：整个系统主要方法
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.RefreshToken(System.String)">
            <summary>
            请求刷新Token（以旧换新）
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.Getjsonp(System.String,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            获取JWT的方法4：给 JSONP 测试
            </summary>
            <param name="callBack"></param>
            <param name="id"></param>
            <param name="sub"></param>
            <param name="expiresSliding"></param>
            <param name="expiresAbsoulute"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.Md5Password(System.String)">
            <summary>
            测试 MD5 加密字符串
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.ValuesController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.GetProducts">
            <summary>
            测试路由
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Get">
            <summary>
            自带Get
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Post(System.String)">
            <summary>
            自带Post
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Put(System.Int32,System.String)">
            <summary>
            自带Put
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Delete(System.Int32)">
            <summary>
            自带Delete
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Blog.Core.SwaggerHelper.CustomApiVersion">
            <summary>
            自定义版本
            </summary>
        </member>
        <member name="T:Blog.Core.SwaggerHelper.CustomApiVersion.ApiVersions">
            <summary>
            Api接口版本 自定义
            </summary>
        </member>
        <member name="F:Blog.Core.SwaggerHelper.CustomApiVersion.ApiVersions.V1">
            <summary>
            V1 版本
            </summary>
        </member>
        <member name="F:Blog.Core.SwaggerHelper.CustomApiVersion.ApiVersions.V2">
            <summary>
            V2 版本
            </summary>
        </member>
    </members>
</doc>
